@layout PageLayout
@page "/text"

@using DSComponents.Input
@using DSComponents.Input.Enums
@using DSComponents.Input.Models
@using DevShed.Models
@using DevShed.Services
@using static DSComponents.Input.Models.DSCConfig

<div class="row">
	<h3 class="p-0">DSC Text</h3>

	<p class="p-0">The DSCText component is a custom input text box.  It is fully customizable and supports numerous attributes and variations such as <span class="cmpt">timeout</span>, <span class="cmpt">minimum</span> and <span class="cmpt">maximum</span> selections, <span class="cmpt">text </span> and <span class="cmpt">background</span> colors, and <span class="cmpt">disabled</span>.  The component also supports custom CSS and CSS Overrides, as well as provides event callbacks.</p>
</div>


<ComponentExample Item="_basicText">
	<Header>
		<h4>Basic Text</h4>
		<p>The basic text input.</p>
	</Header>

	<Example>
		<DSCText Config="@_basicText" />

		<DSCNumber T=decimal Config="@_basicText" />
	</Example>

	<Usage>
		<div class="col-6">
			&lt;<span class="cmpt">DSCText Config</span>&#61;&#34;<span class="bind">&#64;</span>_text&#34; &#47;;&gt; <br />
		</div>
	</Usage>
</ComponentExample>

<ComponentExample Item="_timeoutText">
	<Header>
		<h4>Timeout Text</h4>
		<p>Adding a timeout value will give the component a delay before firing a callback method.  If a timeout value is provided, the <span class="cmpt">OnInput</span> parameter must be set as well.</p>
	</Header>

	<Example>
		<DSCText Config="@_timeoutText" OnInput="inputCallback" />
	</Example>

	<Usage>
		<div class="col-6">
			&lt;<span class="cmpt">DSCText Config</span>&#61;&#34;<span class="bind">&#64;</span>_text&#34; <span class="cmpt">OnInput</span>&#61;&#34;inputCallback&#34; &#47;&gt; <br />
		</div>
	</Usage>
</ComponentExample>

<ComponentExample Item="_disabledText">
	<Header>
		<h4>Disabled</h4>
		<p>Setting the <span class="cmpt">Disabled</span> property to <span class="cmpt">true </span>in the configuration model disables the component.</p>
	</Header>

	<Example>
		<DSCText Config="@_disabledText" />
	</Example>

	<Usage>
		<div class="col-6">
			&lt;<span class="cmpt">DSCText Config</span>&#61;&#34;<span class="bind">&#64;</span>_text&#34; &#47;;&gt; <br />
		</div>
	</Usage>
</ComponentExample>

<ComponentExample Item="_minMaxText">
	<Header>
		<h4>Minimum / Maximum</h4>
		<p>Setting the <span class="cmpt">Minimum/Maximum</span> properties limits the number of characters that can be entered. If no values are provided, the minimum number of selections is set to zero and the maximum is set to the maximum input component length by default.</p>
	</Header>

	<Example>
		<DSCText Config="@_minMaxText" />
	</Example>

	<Usage>
		<div class="col-6">
			&lt;<span class="cmpt">DSCText Config</span>&#61;&#34;<span class="bind">&#64;</span>_text&#34; &#47;;&gt; <br />
		</div>
	</Usage>
</ComponentExample>

<ComponentExample Item="_ignoreText">
	<Header>
		<h4>Ignore Characters</h4>
		<p>Providing the component with the <span class="cmpt">Ignore </span> parameter prevents the component from using the the characters. Providing the parameter with <span class="cmpt">IgnorePattern.Custom </span>requires a custom regex string to be provided to the <span class="cmpt">Pattern </span> parameter.</p>
	</Header>

	<Example>
		<DSCText Config="@_ignoreText" Ignore="IgnorePattern.Special" OnInput="inputCallback" />
	</Example>

	<Usage>
		<div class="col-6">
			&lt;<span class="cmpt">DSCText Config</span>&#61;&#34;<span class="bind">&#64;</span>_text&#34; <span class="cmpt">Ignore</span>&#61;&#34;IgnorePattern.Special&#34; &#47;&gt; <br />
		</div>
	</Usage>
</ComponentExample>

<APIComponent Header="_apiHeader">
	<tr><td colspan="@_apiHeader.Count()"><h5>DSCText</h5></td></tr>
	<tr>
		<td>Config</td>
		<td>Required - <span class="cmpt">DSCInputConfig</span></td>
		<td>N/A</td>
		<td>The <span class="cmpt">DSCInputConfig </span> model used to create the component.</td>
	</tr>
	<tr>
		<td>HideLabel</td>
		<td>Optional - bool</td>
		<td>False</td>
		<td>Parameter to determine whether the label is shown or not.</td>
	</tr>
	<tr>
		<td>Ignore</td>
		<td>Optional - IgnorePattern</td>
		<td>N/A</td>
		<td>Character enum the component should not allow.</td>
	</tr>
	<tr>
		<td>Pattern</td>
		<td>Optional - Regex Pattern</td>
		<td>N/A</td>
		<td>Regex pattern the component should not allow. Is required if the Ignore Pattern is set to <span class="cmpt">IgnorePattern.Custom</span>.</td>
	</tr>
	<tr>
		<td>OnInput</td>
		<td>Optional - EventCallback</td>
		<td>N/A</td>
		<td>Event callback that fires on input. Is required if a timeout value is set.</td>
	</tr>
	<tr><td colspan="@_apiHeader.Count()"><h5>DSCInputConfig</h5></td></tr>
	@foreach(var row in _apiRows)
	{
		<tr>
			<td>@row.Property</td>
			<td>@row.Type</td>
			<td>@row.DefaultValue</td>
			<td>@row.Description</td>
		</tr>
	}
	<tr><td colspan="@_apiHeader.Count()"><h5>DSCLabelConfig</h5></td></tr>
	<tr>
		<td>Label</td>
		<td>Optional - string</td>
		<td>null</td>
		<td>The label name for the component.</td>
	</tr>
	<tr>
		<td>LabelPosition</td>
		<td>Optional - <span class="cmpt">LabelPosition</span></td>
		<td>null</td>
		<td>The position of the component's label.</td>
	</tr>
	<tr><td colspan="@_apiHeader.Count()"><h5>DSCService</h5></td></tr>
	<tr>
		<td>IDSCService</td>
		<td>Required</td>
		<td>N/A</td>
		<td>Injectable service used to manage component interactions.</td>
	</tr>
</APIComponent>

@code {
	[CascadingParameter]
	protected IStateContainer StateContainer { get; set; }

	private IEnumerable<string> _apiHeader = new List<string> { "Parameter", "Type", "Default Value", "Description" };
	private List<TableRow> _apiRows;

	private DSCConfig _basicText = new DSCConfig
	{
		Name = "Basic Text",
		Label = new DSCLabelConfig { Label = "Basic Text", Position = Position.InlineTopLeft }
	};

	private DSCConfig _timeoutText = new DSCConfig
	{
		Name = "Timeout Text",
		Label = new DSCLabelConfig { Label = "Timeout Text", Position = Position.InlineTopLeft },
		Timeout = 1000
	};

	private DSCConfig _disabledText = new DSCConfig
	{
		Name = "Disabled",
		Label = new DSCLabelConfig { Label = "Disabled Text", Position = Position.InlineTopLeft },
		Disabled = true
	};

	private DSCConfig _minMaxText = new DSCConfig
	{
		Name = "Min/Max",
		Label = new DSCLabelConfig { Label = "Min/Max", Position = Position.InlineTopLeft },
		Minimum = 1,
		Maximum = 10
	};

	private DSCConfig _ignoreText = new DSCConfig
	{
		Name = "Ignore Text",
		Label = new DSCLabelConfig { Label = "Ignore Text", Position = Position.InlineTopLeft }
	};

	protected override Task OnInitializedAsync()
	{
		_apiRows = StateContainer.BuildAPITable<DSCConfig>();

		return base.OnInitializedAsync();
	}

	private void inputCallback(string val){}
}
