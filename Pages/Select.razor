@layout PageLayout
@page "/select"

@using DSComponents.Input
@using DSComponents.Input.Enums
@using DSComponents.Input.Models
@using DevShed.Models

<h3>DSC Select</h3>

<p>The DSCSelect component is a custom dropdown menu that displays a selectable list of items.  It is fully customizable and supports numerous attributes and variations such as <span class="cmpt">multiple</span>, <span class="cmpt">searchable</span>, <span class="cmpt">minimum</span> and <span class="cmpt">maximum</span> selections, <span class="cmpt">text </span> and <span class="cmpt">background</span> colors, and <span class="cmpt">disabled</span>.  The component also supports custom CSS and CSS Overrides, as well as provides event callbacks.</p>

<ComponentExample Item="@_basicSelect">
	<Header>
		<h4>Basic Select</h4>
		<p>The basic single select.</p>
	</Header>

	<Example>
		<DSCSelect Config="@_basicSelect" @bind-Expanded="@_basicSelect.Expanded">
			@foreach(var item in _basicSelect.SelectItems)
			{
				<DSCSelectItem Value="@item"  />
			}
		</DSCSelect>
	</Example>
</ComponentExample>

<ComponentExample Item="@_multipleSelect">
	<Header>
		<h4>Multiple Select</h4>
		<p>Setting the <span class="cmpt">Multiple</span> property to <span class="cmpt">true </span>in the configuration model allows for multiple selections.</p>
	</Header>

	<Example>
		<DSCSelect Config="@_multipleSelect" @bind-Expanded="@_multipleSelect.Expanded">
			@foreach(var item in _multipleSelect.SelectItems)
			{
				<DSCSelectItem Value="@item" />
			}
		</DSCSelect>
	</Example>
</ComponentExample>

<ComponentExample Item="@_seachableSelect">
	<Header>
		<h4>Searchable</h4>
		<p>Setting the <span class="cmpt">Searchable</span> property to <span class="cmpt">true </span>in the configuration model allows for multiple selections. This can be used as a single or multiple select.</p>
	</Header>

	<Example>
		<DSCSelect Config="@_seachableSelect" @bind-Expanded="@_seachableSelect.Expanded">
			@foreach(var item in _seachableSelect.SelectItems)
			{
				<DSCSelectItem Value="@item" />
			}
		</DSCSelect>
	</Example>
</ComponentExample>

<ComponentExample Item="@_disabledSelect">
	<Header>
		<h4>Disabled</h4>
		<p>Setting the <span class="cmpt">Disabled</span> property to <span class="cmpt">true </span>in the configuration model disables the component.</p>
	</Header>
	<Example>
		<DSCSelect Config="@_disabledSelect" @bind-Expanded="@_disabledSelect.Expanded">
			@foreach(var item in _disabledSelect.SelectItems)
			{
				<DSCSelectItem Value="@item" />
			}
		</DSCSelect>
	</Example>
</ComponentExample>

<ComponentExample Item="@_minMaxSelect">
	<Header>
		<h4>Minimum / Maximum</h4>
		<p>Setting the <span class="cmpt">Minimum/Maximum</span> properties limits the number of selections that can be made. If no values are provided, the minimum number of selections is set to zero and the maximum is set to the total number of items by default.</p>
	</Header>
	<Example>
		<DSCSelect Config="@_minMaxSelect" @bind-Expanded="@_minMaxSelect.Expanded">
			@foreach(var item in _minMaxSelect.SelectItems)
			{
				<DSCSelectItem Value="@item" />
			}
		</DSCSelect>
	</Example>
</ComponentExample>

<APIComponent Header="@_apiHeader" />

@code {
	private IEnumerable<string> _apiHeader = new List<string> { "Parameter", "Type", "Default Value", "Binding", "Description" };

	private DSCInputConfig _basicSelect = new DSCInputConfig
	{
		Name = "Basic",
		SelectItems = new List<object>{ "Item 1", "Item 2", "Item 3" },
		Label = new DSCLabelConfig {Label = "Basic Select", Position = LabelPosition.InlineTopLeft }
	};

	private DSCInputConfig _multipleSelect = new DSCInputConfig
	{
		Name = "Multiple",
		SelectItems = new List<object> { "Item 1", "Item 2", "Item 3" },
		Multiple = true,
		Label = new DSCLabelConfig { Label = "Multiple Select", Position = LabelPosition.InlineTop }
	};

	private DSCInputConfig _seachableSelect = new DSCInputConfig
	{
		Name = "Search",
		SelectItems = new List<object>
		{
			"Item 1",
			"Item 2",
			"Item 3"
		},
		Searchable = true,
		Placeholder = "Search...",
		Label = new DSCLabelConfig { Label = "Search", Position = LabelPosition.InlineTopRight }
	};

	private DSCInputConfig _disabledSelect = new DSCInputConfig
	{
		Name = "Disabled",
		SelectItems = new List<object>
		{
			"Item 1",
			"Item 2",
			"Item 3"
		},
		Disabled = true,
		Label = new DSCLabelConfig { Label = "Disabled", Position = LabelPosition.InlineTopLeft }
	};

	private DSCInputConfig _minMaxSelect = new DSCInputConfig
	{
		Name = "Min/Max",
		SelectItems = new List<object>
		{
			"Item 1",
			"Item 2",
			"Item 3",
			"Item 4",
			"Item 5"
		},
		Multiple = true,
		Minimum = 1,
		Maximum = 3,
		Label = new DSCLabelConfig { Label = "Min/Max", Position = LabelPosition.InlineTop }
	};

	protected override Task OnAfterRenderAsync(bool firstRender)
	{
		if(firstRender)
		{
			var properties = _basicSelect.GetType().GetProperties();

			var rows = new List<TableRow>();

			foreach(var prop in properties)
			{
				var attr = prop.GetCustomAttributes(true).FirstOrDefault() as DSCInputAttribute;

				var row = new TableRow
				{
					Property = prop.Name,
					Type = $"{((attr?.Required == true) ? "Required" : "Optional")} - {attr?.Type}",
					Description = attr?.Description ?? "",
					DefaultValue = prop.GetValue(_basicSelect)?.ToString() ?? "N/A"
				};

				rows.Add(row);
			}

			var meh = rows;
			@*
			var heh = meh.Select(x => x.Name).ToList();

			var hah = meh.Select(x => x.PropertyType.Name).ToList();*@
		}
		return base.OnAfterRenderAsync(firstRender);
	}
}